# You can override the included template(s) by including variable overrides
# SAST customization: https://docs.gitlab.com/ee/user/application_security/sast/#customizing-the-sast-settings
# Secret Detection customization: https://docs.gitlab.com/ee/user/application_security/secret_detection/pipeline/#customization
# Dependency Scanning customization: https://docs.gitlab.com/ee/user/application_security/dependency_scanning/#customizing-the-dependency-scanning-settings
# Container Scanning customization: https://docs.gitlab.com/ee/user/application_security/container_scanning/#customizing-the-container-scanning-settings
# Note that environment variables can be set in several places
# See https://docs.gitlab.com/ee/ci/variables/#cicd-variable-precedence
stages:
- build
- push
- deliver
- promote
- deploy
- test
  #- review
  #- dast
  #- staging
  #- canary
  #- production
  #- incremental rollout 10%
  #- incremental rollout 25%
  #- incremental rollout 50%
  #- incremental rollout 100%
  #- performance
  #- cleanup
build:
  image: docker:24.0.5
  stage: build
  services:
  - docker:24.0.5-dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
  - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD"
  script:
  - cd source_files/weatherapp_4_0.0.1/auth
  - docker build -t $CI_REGISTRY_USER/weatherapp-auth4 . --no-cache
  - cd ../UI
  - docker build -t $CI_REGISTRY_USER/weatherapp-ui4 .
  - cd ../weather
  - docker build -t $CI_REGISTRY_USER/weatherapp-weather4 .
  rules:
  - if: "$CI_COMMIT_TAG == null"
push:
  image: docker:latest
  stage: push
  services:
  - docker:dind
  before_script:
  - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD"
  script:
  - cd source_files/weatherapp_4_0.0.1/auth
  - docker build -t $CI_REGISTRY_USER/weatherapp-auth4:$CI_COMMIT_SHA . --no-cache
  - docker push $CI_REGISTRY_USER/weatherapp-auth4:$CI_COMMIT_SHA
  - cd ../UI
  - docker build -t $CI_REGISTRY_USER/weatherapp-ui4:$CI_COMMIT_SHA .
  - docker push $CI_REGISTRY_USER/weatherapp-ui4:$CI_COMMIT_SHA
  - cd ../weather
  - docker build -t $CI_REGISTRY_USER/weatherapp-weather4:$CI_COMMIT_SHA .
  - docker push $CI_REGISTRY_USER/weatherapp-weather4:$CI_COMMIT_SHA
  only:
  - main
deliver:
  stage: deliver
  image:
    name: alpine/helm:latest
    entrypoint:
    - ''
  before_script:
  - apk add py3-pip
  - apk add python3 py3-awscrt py3-certifi py3-colorama py3-cryptography py3-dateutil
    py3-distro py3-docutils py3-jmespath py3-prompt_toolkit py3-ruamel.yaml py3-urllib3
  - apk add aws-cli
  - aws configure set region "us-east-1"
  - mkdir /tmp/.kube
  - echo $KUBECONFIG_KOPS | base64 -d > /tmp/.kube/config
  - helm repo add bitnami https://charts.bitnami.com/bitnami
  script:
  - cd source_files/weatherapp_4_0.0.1/weatherapp-auth
  - helm dependency build .
  - helm upgrade --install weatherapp-auth --kubeconfig /tmp/.kube/config -n staging
    --set mysql.auth.rootPassword=$DB_PASSWORD --set image.tag=$CI_COMMIT_SHA .
  - cd ../weatherapp-ui
  - helm upgrade --install --kubeconfig /tmp/.kube/config weatherapp-ui -n staging
    --set image.tag=$CI_COMMIT_SHA .
  - cd ../weatherapp-weather
  - helm upgrade --install --kubeconfig /tmp/.kube/config -n staging weatherapp-weather
    --set apikey=$API_KEY --set image.tag=$CI_COMMIT_SHA .
  only:
  - main
promote:
  stage: promote
  services:
  - docker:dind
  image: docker:latest
  before_script:
  - apk add git
  - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD"
  - TAGGED_HASH=`git rev-list -n 1 $CI_COMMIT_TAG`
  script:
  - echo "Promoting Docker images"
  - docker pull $CI_REGISTRY_USER/weatherapp-ui4:$TAGGED_HASH
  - docker pull $CI_REGISTRY_USER/weatherapp-auth4:$TAGGED_HASH
  - docker pull $CI_REGISTRY_USER/weatherapp-weather4:$TAGGED_HASH
  - docker tag $CI_REGISTRY_USER/weatherapp-ui4:$TAGGED_HASH $CI_REGISTRY_USER/weatherapp-ui4:$CI_COMMIT_TAG
  - docker tag $CI_REGISTRY_USER/weatherapp-auth4:$TAGGED_HASH $CI_REGISTRY_USER/weatherapp-auth4:$CI_COMMIT_TAG
  - docker tag $CI_REGISTRY_USER/weatherapp-weather4:$TAGGED_HASH $CI_REGISTRY_USER/weatherapp-weather4:$CI_COMMIT_TAG
  - docker push $CI_REGISTRY_USER/weatherapp-ui4:$CI_COMMIT_TAG
  - docker push $CI_REGISTRY_USER/weatherapp-auth4:$CI_COMMIT_TAG
  - docker push $CI_REGISTRY_USER/weatherapp-weather4:$CI_COMMIT_TAG
  rules:
  - if: "$CI_COMMIT_TAG"
deploy:
  stage: deploy
  image:
    name: alpine/helm:latest
    entrypoint:
    - ''
  before_script:
  - apk add py3-pip
  - apk add python3 py3-awscrt py3-certifi py3-colorama py3-cryptography py3-dateutil
    py3-distro py3-docutils py3-jmespath py3-prompt_toolkit py3-ruamel.yaml py3-urllib3
  - apk add aws-cli
  - aws configure set region "us-east-1"
  - mkdir /tmp/.kube
  - echo $KUBECONFIG_KOPS | base64 -d > /tmp/.kube/config
  - helm repo add bitnami https://charts.bitnami.com/bitnami
  script:
  - cd source_files/weatherapp_4_0.0.1/weatherapp-auth
  - helm dependency build .
  - helm upgrade --install weatherapp-auth --kubeconfig /tmp/.kube/config --set mysql.auth.rootPassword=$DB_PASSWORD
    --set image.tag=$CI_COMMIT_TAG .
  - cd ../weatherapp-ui
  - helm upgrade --install --kubeconfig /tmp/.kube/config weatherapp-ui --set image.tag=$CI_COMMIT_TAG
    .
  - cd ../weatherapp-weather
  - helm upgrade --install --kubeconfig /tmp/.kube/config weatherapp-weather --set
    apikey=$API_KEY --set image.tag=$CI_COMMIT_TAG .
  rules:
  - if: "$CI_COMMIT_TAG"
    when: manual
test:
#sast:
  stage: test
include:
- template: Auto-DevOps.gitlab-ci.yml
